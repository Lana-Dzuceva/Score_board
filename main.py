# -*- coding: utf-8 -*-
import sys

import PyQt5
# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QLinearGradient, QBrush, QPalette, QColor
from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

from dialog_window import ChooseWinner


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, number_of_teams, teams):
        super().__init__()
        self.number_of_teams = number_of_teams
        self.teams = teams
        print(teams)
        self.left_buttons = {}
        self.right_buttons = {}
        self.left_teams = {}
        self.right_teams = {}
        stage = self.number_of_teams // 2
        while stage > 0:
            self.left_teams[stage] = [""] * stage
            self.right_teams[stage] = [""] * stage
            stage //= 2

        self.setupUi(self)


    def draw_hline(self, left, top, width, height):
        line = QtWidgets.QFrame(self.centralwidget)
        line.setGeometry(QtCore.QRect(left, top, width, height))
        line.setFrameShape(QtWidgets.QFrame.HLine)
        line.setFrameShadow(QtWidgets.QFrame.Sunken)

    def draw_vline(self, left, top, width, height):
        line_vertical = QtWidgets.QFrame(self.centralwidget)
        line_vertical.setGeometry(QtCore.QRect(left, top, width, height))
        line_vertical.setFrameShape(QtWidgets.QFrame.VLine)
        line_vertical.setFrameShadow(QtWidgets.QFrame.Sunken)

    def callback(self, winner, i, stage, buttons, teams):
        buttons[stage][i].setText(winner)
        teams[stage][i] = winner
        if teams[stage * 2][i * 2] == winner:
            buttons[stage * 2][i * 2].setStyleSheet(r"background: LightGreen")
            buttons[stage * 2][i * 2 + 1].setStyleSheet(r"background: grey")
        else:
            buttons[stage * 2][i * 2].setStyleSheet(r"background: grey")
            buttons[stage * 2][i * 2 + 1].setStyleSheet(r"background: LightGreen")#LightGreen

    def open_choose_winner_window(self, i, stage, is_right):
        if stage == self.number_of_teams // 2:
            return
        if is_right:
            teams = self.right_teams
            buttons = self.right_buttons
        else:
            teams = self.left_teams
            buttons = self.left_buttons

        team_title1 = teams[stage * 2][i * 2]
        team_title2 = teams[stage * 2][i * 2 + 1]
        if team_title1 == "" or team_title2 == "":
            QMessageBox.about(self, "Ошибка", "В предыдущих раундах победитель не выбран")
            return
        print(team_title1, team_title2)
        w = ChooseWinner(team_title1, team_title2, lambda winner: self.callback(winner, i, stage, buttons, teams))
        w.show()


    def build_right_subtree(self, stage, target_stage, zazor, x, y, i, button_width, button_height, font):
        if stage not in self.right_buttons:
            self.right_buttons[stage] = []
        # нарисовать кнопку
        self.right_buttons[stage].append(QtWidgets.QPushButton(self.centralwidget))
        self.right_buttons[stage][i].setGeometry(QtCore.QRect(x, y, button_width, button_height))
        self.right_buttons[stage][i].setStyleSheet(r"background: AliceBlue")
        if stage == target_stage:
            self.right_buttons[stage][i].setText(self.teams[self.number_of_teams // 2 + i])
            self.right_teams[stage][i] = self.teams[self.number_of_teams // 2 + i]
        self.right_buttons[stage][i].setFont(font)
        self.right_buttons[stage][i].clicked.connect(lambda: self.open_choose_winner_window(i, stage, True))
        if stage != target_stage:
            d = 10
            len_horizontal_line = 40
            self.draw_hline(x + button_width, y + button_height // 2, d, 2)

            # палку
            self.draw_vline(x + button_width + d, y - zazor // 2 + button_height // 2, 2, zazor)
            # еще две палки
            self.draw_hline(x + button_width + d, y - zazor // 2 + button_height // 2, len_horizontal_line - d, 2)
            self.draw_hline(x + button_width + d, y - zazor // 2 + button_height // 2 + zazor, len_horizontal_line - d,  2)
            # пустить дальше
            self.build_right_subtree(stage * 2, target_stage, zazor // 2, x + len_horizontal_line + button_width, y - zazor // 2, i * 2,
                                     button_width, button_height, font)
            self.build_right_subtree(stage * 2, target_stage, zazor // 2, x + len_horizontal_line + button_width, y + zazor // 2,
                                     i * 2 + 1, button_width, button_height, font)

    def build_left_subtree(self, stage, target_stage, zazor, x, y, i, button_width, button_height, font):
        # нарисовать кнопку
        # палку
        # еще две палки
        # пустить дальше
        if stage not in self.left_buttons:
            self.left_buttons[stage] = []

        # if stage != 1:
        self.left_buttons[stage].append(QtWidgets.QPushButton(self.centralwidget))
        self.left_buttons[stage][i].setGeometry(QtCore.QRect(x, y, button_width, button_height))
        self.left_buttons[stage][i].clicked.connect(lambda: self.open_choose_winner_window(i, stage, False))

        if stage == target_stage:
            self.left_buttons[stage][i].setText(self.teams[i])
            self.left_teams[stage][i] = self.teams[i]

        self.left_buttons[stage][i].setFont(font)
        self.left_buttons[stage][i].setStyleSheet(r"background: AliceBlue")

        if stage != target_stage:
            d = 10
            len_horizontal_line = 40
            line = QtWidgets.QFrame(self.centralwidget)
            line.setGeometry(QtCore.QRect(x - d, y + button_height // 2, d, 2))
            line.setFrameShape(QtWidgets.QFrame.HLine)
            line.setFrameShadow(QtWidgets.QFrame.Sunken)

            line_vertical = QtWidgets.QFrame(self.centralwidget)
            line_vertical.setGeometry(QtCore.QRect(x - d, y - zazor // 2 + button_height // 2, 2, zazor))
            line_vertical.setFrameShape(QtWidgets.QFrame.VLine)
            line_vertical.setFrameShadow(QtWidgets.QFrame.Sunken)

            for r in range(2):
                line = QtWidgets.QFrame(self.centralwidget)
                line.setGeometry(QtCore.QRect(x - len_horizontal_line, y - zazor // 2 + button_height // 2 + zazor * r,
                                              len_horizontal_line - d, 2))
                line.setFrameShape(QtWidgets.QFrame.HLine)
                line.setFrameShadow(QtWidgets.QFrame.Sunken)

            self.build_left_subtree(stage * 2, target_stage, zazor // 2, x - len_horizontal_line - button_width, y - zazor // 2,
                                    i * 2, button_width, button_height, font)
            self.build_left_subtree(stage * 2, target_stage, zazor // 2, x - len_horizontal_line - button_width, y + zazor // 2,
                                    i * 2 + 1, button_width, button_height, font)

    def generate_layout(self):
        font = QtGui.QFont()
        font.setPointSize(10)
        button_width = 100
        button_height = 40
        zazor = 200
        x_shift = 100
        y_shift = 0
        if self.number_of_teams == 32:
            zazor = 350
            x_shift = 300
            y_shift = 170

        # (self, stage, target_stage, zazor, x, y, i, _translate, button_width, button_height, font):
        self.build_right_subtree(1, self.number_of_teams // 2, zazor, 600 + button_width + x_shift , 200 + y_shift, 0, button_width, button_height, font)
        self.build_left_subtree(1, self.number_of_teams // 2, zazor, 600 -  2 * button_width + x_shift, 200 + y_shift, 0, button_width, button_height, font)

    def last_callback(self, winner, left_buttons, left_teams, right_buttons):
        self.button_winner.setText(winner)
        if left_teams[1][0] == winner:
            left_buttons[1][0].setStyleSheet(r"background: LightGreen")
            right_buttons[1][0].setStyleSheet(r"background: grey")
        else:
            left_buttons[1][0].setStyleSheet(r"background: grey")
            right_buttons[1][0].setStyleSheet(r"background: LightGreen")  # LightGreen
        QMessageBox.about(self, "Ура", f"Победителем стала команда {winner}")


    def get_winner(self):
        team_title1 = self.left_teams[1][0]
        team_title2 = self.right_teams[1][0]
        if team_title1 == "" or team_title2 == "":
            QMessageBox.about(self, "Ошибка", "В предыдущих раундах победитель не выбран")
            return
        print(team_title1, team_title2)

        w = ChooseWinner(team_title1, team_title2,
                lambda winner: self.last_callback(winner, self.left_buttons, self.left_teams, self.right_buttons))
        w.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")

        if self.number_of_teams == 32:
            MainWindow.setFixedSize(1800, 800)
        else:
            MainWindow.setFixedSize(1500, 800)
        # palette = QtGui.QPalette()
        # palette.setBrush(QtGui.QPalette.Background, QtGui.QBrush(QPixmap('background.jpg')))
        # self.setPalette(palette)
        pixmap = QPixmap('background.jpg')

        # Создаем QLabel для отображения фонового изображения
        background_label = QLabel(self)
        background_label.setPixmap(pixmap)
        background_label.setGeometry(0, 0, self.width(), self.height())  # Растягиваем QLabel на всю форму
        background_label.setScaledContents(True)  # Масштабируем изображение в QLabel

        # Настройка стиля CSS для QLabel
        background_label.setStyleSheet("background-color: transparent;")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        x_shift = 100
        y_shift = 0
        if self.number_of_teams == 32:
            x_shift = 300
            y_shift = 170
        self.button_winner = QtWidgets.QPushButton(self.centralwidget)
        self.button_winner.setGeometry(QtCore.QRect(600 - 80 + x_shift, 300 + y_shift, 160, 60))
        self.button_winner.setStyleSheet(r"background: AliceBlue")
        font = QtGui.QFont()
        font.setPointSize(20)
        self.button_winner.setFont(font)
        self.button_winner.clicked.connect(lambda: self.get_winner())

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1084, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.generate_layout()

        # Draw lines connecting the winner button to the final round buttons
        self.connect_winner_to_finalists()

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def connect_winner_to_finalists(self):
        button_winner_center_x = self.button_winner.geometry().center().x()
        button_winner_top_y = self.button_winner.geometry().top()

        left_final_button = self.left_buttons[1][0]
        right_final_button = self.right_buttons[1][0]

        left_final_button_center_x = left_final_button.geometry().center().x()
        right_final_button_center_x = right_final_button.geometry().center().x()
        final_buttons_center_y = left_final_button.geometry().center().y()

        # Line from left final button to winner button
        self.draw_hline(left_final_button.geometry().right(), final_buttons_center_y,
                        button_winner_center_x - left_final_button.geometry().right(), 2)
        self.draw_hline(button_winner_center_x, final_buttons_center_y,
                        right_final_button.geometry().left() - button_winner_center_x, 2)
        self.draw_vline(button_winner_center_x, final_buttons_center_y, 2, button_winner_top_y - final_buttons_center_y)

    def draw_vline(self, x, y, width, height):
        line = QtWidgets.QFrame(self.centralwidget)
        line.setGeometry(QtCore.QRect(x, y, width, height))
        line.setFrameShape(QtWidgets.QFrame.VLine)
        line.setFrameShadow(QtWidgets.QFrame.Sunken)


# app = QtWidgets.QApplication([])
# application = Ui_MainWindow()
# application.show()
#
# sys.exit(app.exec())
